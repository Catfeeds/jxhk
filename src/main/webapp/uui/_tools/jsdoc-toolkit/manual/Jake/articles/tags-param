<!--{
    "title":       "@param",
    "out":         "tags-param.html",
    "description": "Document the parameter to a function."
}-->

<h3>Synonyms</h3>

<ul>
    <li>@arg</li>
    <li>@argument</li>
</ul>

<h3>Overview</h3>

<p>
The @param tag (or @arg or @argument) documents a function parameter.
</p>

<p>
The @param tag requires you to specify the name of the parameter you are documenting. You can also
include the parameter's type, enclosed in curly brackets, and a description of the parameter.
</p>

<p>
The parameter type can be a built-in JavaScript type, such as <code>string</code> or
<code>Object</code>, or a <a href="about-namepaths.html">JSDoc namepath</a> to another symbol in
your code. If you have written documentation for the symbol at that namepath, JSDoc will
automatically link to the documentation for that symbol. You can also use a type expression to
indicate, for example, that a parameter is not nullable or can accept any type; see the
<a href="tags-type.html">@type documentation</a> for details.
</p>

<p>
If you provide a description, you can make the JSDoc comment more readable by inserting a hyphen
before the description. Be sure to include a space before and after the hyphen.
</p>

<h3>Examples</h3>

<p>
The following examples show how to include names, types, and descriptions in a @param tag.
</p>

{{#example}}Name only
/**
 * @param somebody
 */
function sayHello(somebody) {
    alert('Hello ' + somebody);
}
{{/example}}

{{#example}}Name and type
/**
 * @param {string} somebody
 */
function sayHello(somebody) {
    alert('Hello ' + somebody);
}
{{/example}}


{{#example}}Name, type, and description
/**
 * @param {string} somebody Somebody's name.
 */
function sayHello(somebody) {
    alert('Hello ' + somebody);
}
{{/example}}

<p>
You can add a hyphen before the description to make it more readable. Be sure to include a space
before and after the hyphen.
</p>

{{#example}}Name, type, and description, with a hyphen before the description
/**
 * @param {string} somebody - Somebody's name.
 */
function sayHello(somebody) {
    alert('Hello ' + somebody);
}
{{/example}}

<p>
The following examples show how to indicate that a parameter is optional and has a default value.
</p>

{{#example}}An optional parameter (using JSDoc syntax)
/**
 * @param {string} [somebody] - Somebody's name.
 */
function sayHello(somebody) {
    if (!somebody) {
        somebody = 'John Doe';
    }
    alert('Hello ' + somebody);
}
{{/example}}

{{#example}}An optional parameter (using Google Closure Compiler syntax)
/**
 * @param {string=} somebody - Somebody's name.
 */
function sayHello(somebody) {
    if (!somebody) {
        somebody = 'John Doe';
    }
    alert('Hello ' + somebody);
}

{{/example}}

{{#example}}An optional parameter and default value
/**
 * @param {string} [somebody=John Doe] - Somebody's name.
 */
function sayHello(somebody) {
    if (!somebody) {
        somebody = 'John Doe';
    }
    alert('Hello ' + somebody);
}
{{/example}}

<p>
The following examples show how to use type expressions to indicate that a parameter can accept
multiple types (or any type), and that a parameter can be provided more than once. See the
<a href="tags-type.html">@type documentation</a> for details about the type expressions that JSDoc
supports.
</p>

{{#example}}Allows one type OR another type (type union)
/**
 * @param {(string|string[])} [somebody=John Doe] - Somebody's name, or an array of names.
 */
function sayHello(somebody) {
    if (!somebody) {
        somebody = 'John Doe';
    } else if (Array.isArray(somebody)) {
        somebody = somebody.join(', ');
    }
    alert('Hello ' + somebody);
}
{{/example}}

{{#example}}Allows any type
/**
 * @param {*} somebody - Whatever you want.
 */
function sayHello(somebody) {
    console.log('Hello ' + JSON.stringify(somebody));
}
{{/example}}

{{#example}}Allows a parameter to be repeated
/**
 * Returns the sum of all numbers passed to the function.
 * @param {...number} num - A positive or negative number.
 */
function sum(num) {
    var i = 0, n = arguments.length, t = 0;
    for (; i &lt; n; i++) {
        t += arguments[i];
    }
    return t;
}
{{/example}}

<p>
If a parameter accepts a callback function, you can use the <a href="tags-callback.html">@callback
tag</a> to define a callback type, then include the callback type in the @param tag.
</p>

{{#example}}Parameters that accept a callback
/**
 * This callback type is called `requestCallback` and is displayed as a global symbol.
 *
 * @callback requestCallback
 * @param {number} responseCode
 * @param {string} responseMessage
 */

/**
 * Does something asynchronously and executes the callback on completion.
 * @param {requestCallback} cb - The callback that handles the response.
 */
function doSomethingAsynchronously(cb) {
    // code
};
{{/example}}

<h3>See Also</h3>

<ul>
    <li><a href="tags-callback.html">@callback</a></li>
    <li><a href="tags-returns.html">@returns</a></li>
    <li><a href="tags-type.html">@type</a></li>
    <li><a href="tags-typedef.html">@typedef</a></li>
</ul>
